# -*- python -*-
# This file contains rules for Bazel; see drake/doc/bazel.rst.

load(
    "@drake//tools/skylark:drake_cc.bzl",
    "drake_cc_binary",
    "drake_cc_googletest",
    "drake_cc_library",
)
load(
    "@drake//tools/skylark:drake_py.bzl",
    "drake_py_binary",
    "drake_py_library",
)
load("@drake//tools/skylark:test_tags.bzl", "vtk_test_tags")
load("//tools/install:install_data.bzl", "install_data")
load("//tools/lint:lint.bzl", "add_lint_tests")
load("//tools/skylark:test_tags.bzl", "vtk_test_tags")

drake_cc_library(
    name = "manipulation_station",
    srcs = [
        "manipulation_station.cc",
        "lcm_blocking_trigger.cc",
    ],
    hdrs = [
        "manipulation_station.h",
        "lcm_blocking_trigger.h",
    ],
    copts = ["-g"],
    data = [
        ":models",
        "//examples/kuka_iiwa_arm:models",
        "//manipulation/models/iiwa_description:models",
        "//manipulation/models/wsg_50_description:models",
        "//manipulation/models/ycb:models",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//common:find_resource",
        "//geometry:scene_graph",
        "//geometry/render:render_engine_vtk",
        "//geometry/render:render_engine_ospray",
        "//manipulation/schunk_wsg:schunk_wsg_constants",
        "//manipulation/schunk_wsg:schunk_wsg_position_controller",
        "//math:geometric_transform",
        "//multibody/parsing",
        "//multibody/plant",
        "//systems/controllers:inverse_dynamics_controller",
        "//systems/framework",
        "//systems/sensors:rgbd_sensor",
    ],
)

drake_cc_library(
    name = "manipulation_station_hardware_interface",
    srcs = [
        "manipulation_station_hardware_interface.cc",
    ],
    hdrs = [
        "manipulation_station_hardware_interface.h",
    ],
    data = [
        "//manipulation/models/iiwa_description:models",
        "//manipulation/models/wsg_50_description:models",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//common:find_resource",
        "//lcm",
        "//manipulation/kuka_iiwa:iiwa_command_sender",
        "//manipulation/kuka_iiwa:iiwa_status_receiver",
        "//manipulation/schunk_wsg:schunk_wsg_lcm",
        "//multibody/parsing",
        "//multibody/plant",
        "//systems/framework",
        "//systems/lcm",
        "//systems/primitives",
        "//systems/sensors:lcm_image_array_to_images",
    ],
)

drake_cc_library(
    name = "pose_writer",
    srcs = [
        "pose_writer.cc",
    ],
    hdrs = [
        "pose_writer.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//multibody/plant",
        "//systems/framework",
    ],
)

drake_cc_library(
    name = "point_cloud_visualizer",
    srcs = [
        "point_cloud_visualizer.cc",
    ],
    hdrs = [
        "point_cloud_visualizer.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//multibody/plant",
        "//systems/framework",
        "@lcmtypes_bot2_core",
    ],
)

drake_cc_library(
    name = "pdc_ik",
    srcs = [
        "pdc_ik.cc",
    ],
    hdrs = [
        "pdc_ik.h"
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":manipulation_station",
        "//geometry:geometry_visualization",
        "//lcm",
        "//multibody/inverse_kinematics:inverse_kinematics",
        "//solvers:solve",
        "@gflags",
    ],
)

drake_cc_library(
    name = "pdc_common",
    srcs = [
        "pdc_common.cc",
    ],
    hdrs = [
        "pdc_common.h"
    ],
    copts = ["-g"],
    linkopts = ["-lstdc++fs"],
    visibility = ["//visibility:public"],
    deps = [
        ":manipulation_station",
        "//multibody/plant:contact_results_to_lcm",
        "//systems/sensors:image_to_lcm_image_array_t",
        "//systems/sensors:image_writer",
        "//manipulation/robot_bridge:robot_bridge",
        "//systems/sensors:mask_converter",
        "//multibody/plant:frame_visualizer",
        "//multibody/plant:kinematics_calculator",
        ":point_cloud_visualizer",
        ":pose_writer",
        "//geometry:geometry_visualization",
        "//lcm",
        "//multibody/inverse_kinematics:inverse_kinematics",
        "//solvers:solve",
        "@gflags",
    ],
)

drake_cc_binary(
    name = "mock_station_simulation",
    srcs = [
        "mock_station_simulation.cc",
    ],
    add_test_rule = 1,
    tags = vtk_test_tags(),
    test_rule_args = ["--target_realtime_rate=0.0 --duration=0.1"],
    deps = [
        ":manipulation_station",
        "//geometry:geometry_visualization",
        "//lcm",
        "//manipulation/kuka_iiwa:iiwa_command_receiver",
        "//manipulation/kuka_iiwa:iiwa_status_sender",
        "//manipulation/schunk_wsg:schunk_wsg_lcm",
        "//systems/analysis:simulator",
        "//systems/lcm",
        "@gflags",
    ],
)

drake_cc_binary(
    name = "proof_of_life",
    srcs = [
        "proof_of_life.cc",
    ],
    add_test_rule = 1,
    tags = vtk_test_tags(),
    test_rule_args = ["--target_realtime_rate=0.0 --duration=0.1 --test"],
    test_rule_timeout = "moderate",
    deps = [
        ":manipulation_station",
         "//geometry:geometry_visualization",
         "//multibody/plant:contact_results_to_lcm",
         "//systems/analysis:simulator",
         "//systems/sensors:image_to_lcm_image_array_t",
         "@gflags",
     ],
 )

drake_cc_binary(
    name = "pdc_record_data",
    srcs = [
        "pdc_record_data.cc",
    ],
    copts = ["-g"],
    linkopts = ["-lstdc++fs"],
    deps = [
        ":manipulation_station",
        ":pdc_common",
        ":pdc_ik",
        ":pose_writer",
        ":point_cloud_visualizer",
        "//manipulation/robot_bridge:robot_bridge",
        "//geometry:geometry_visualization",
        "//multibody/plant:contact_results_to_lcm",
        "//systems/analysis:simulator",
        "//systems/sensors:image_to_lcm_image_array_t",
        "//systems/sensors:image_writer",
        "//systems/sensors:mask_converter",
        "//multibody/plant:frame_visualizer",
        "//multibody/plant:kinematics_calculator",
        "@gflags",
    ],
    data = [
        "//manipulation/models/iiwa_description:models",
        "//manipulation/models/wsg_50_description:models",
        "//manipulation/models/ycb:models",
        "//manipulation/models/wood_floor_taku:models",
        "//manipulation/models/wood_floor_cody:models",
    ],
)

drake_cc_binary(
    name = "servo_obj",
    srcs = [
        "servo_obj.cc",
    ],
    copts = ["-g"],
    linkopts = ["-lstdc++fs"],
    deps = [
        ":manipulation_station",
        ":pdc_common",
        ":pdc_ik",
        ":pose_writer",
        ":point_cloud_visualizer",
        "//manipulation/robot_bridge:robot_bridge",
        "//geometry:geometry_visualization",
        "//multibody/plant:contact_results_to_lcm",
        "//systems/analysis:simulator",
        "//systems/sensors:image_to_lcm_image_array_t",
        "//systems/sensors:image_writer",
        "//systems/sensors:mask_converter",
        "//multibody/plant:frame_visualizer",
        "//multibody/plant:kinematics_calculator",
        "//lcmtypes:lcmtypes_drake_cc",
        "@gflags",
    ],
    data = [
        "//manipulation/models/iiwa_description:models",
        "//manipulation/models/wsg_50_description:models",
        "//manipulation/models/ycb:models",
        "//manipulation/models/wood_floor_taku:models",
        "//manipulation/models/wood_floor_cody:models",
    ],
)

drake_cc_binary(
    name = "potato_demo",
    srcs = [
        "potato_demo.cc",
    ],
    copts = ["-g"],
    linkopts = ["-lstdc++fs"],
    deps = [
        ":manipulation_station",
        ":pdc_common",
        ":pdc_ik",
        ":pose_writer",
        ":point_cloud_visualizer",
        "//manipulation/robot_bridge:robot_bridge",
        "//geometry:geometry_visualization",
        "//multibody/plant:contact_results_to_lcm",
        "//systems/analysis:simulator",
        "//systems/sensors:image_to_lcm_image_array_t",
        "//systems/sensors:image_writer",
        "//systems/sensors:mask_converter",
        "//multibody/plant:frame_visualizer",
        "//multibody/plant:kinematics_calculator",
        "@gflags",
    ],
)

# Tests

drake_cc_googletest(
    name = "manipulation_station_test",
    # Frequently exceeds short timeout in
    # linux-bionic-clang-bazel-nightly-coverage
    timeout = "moderate",
    tags = vtk_test_tags(),
    deps = [
        ":manipulation_station",
        "//common/test_utilities:eigen_matrix_compare",
        "//common/test_utilities:expect_no_throw",
        "//geometry/test_utilities:dummy_render_engine",
    ],
)

drake_cc_googletest(
    name = "manipulation_station_hardware_interface_test",
    deps = [
        ":manipulation_station_hardware_interface",
        "//systems/sensors:image",
    ],
)

# Python examples

drake_py_library(
    name = "differential_ik",
    srcs = ["differential_ik.py"],
    visibility = ["//visibility:private"],
    deps = [
        "//bindings/pydrake",
    ],
)

drake_py_binary(
    name = "joint_teleop",
    srcs = ["joint_teleop.py"],
    add_test_rule = 1,
    tags = vtk_test_tags(),
    test_rule_args = ["--test --target_realtime_rate=0.0 --duration=0.1"],
    test_rule_timeout = "moderate",  # Frequently exceeds short timeout in dbg.
    deps = [
        "//bindings/pydrake",
    ],
)

drake_py_binary(
    name = "end_effector_teleop_mouse",
    srcs = ["end_effector_teleop_mouse.py"],
    add_test_rule = 1,
    tags = vtk_test_tags(),
    test_rule_args = ["--test --target_realtime_rate=0.0 --duration=0.1"],
    test_rule_timeout = "moderate",  # Frequently exceeds short timeout in dbg.
    deps = [
        ":differential_ik",
        "//bindings/pydrake",
        "@pygame_py",
    ],
)

drake_py_binary(
    name = "end_effector_teleop_sliders",
    srcs = ["end_effector_teleop_sliders.py"],
    add_test_rule = 1,
    tags = vtk_test_tags(),
    test_rule_args = ["--test --target_realtime_rate=0.0 --duration=0.1"],
    test_rule_timeout = "moderate",  # Frequently exceeds short timeout in dbg.
    deps = [
        ":differential_ik",
        "//bindings/pydrake",
    ],
)

drake_py_binary(
    name = "print_station_context",
    srcs = ["print_station_context.py"],
    add_test_rule = 1,
    deps = [
        "//bindings/pydrake",
    ],
)

install_data()

add_lint_tests()
